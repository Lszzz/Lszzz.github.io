<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯模拟：字符串</title>
      <link href="/2020/02/29/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2020/02/29/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="计蒜客蓝桥杯模拟：字符串"><a href="#计蒜客蓝桥杯模拟：字符串" class="headerlink" title="计蒜客蓝桥杯模拟：字符串"></a>计蒜客蓝桥杯模拟：字符串</h1><p>题目描述：</p><p>有一个长度为 $L$ 的字符串，每个字符是大写字母。如果我们把 $A$ 看做 $0$ ，$B$ 看做 $1$ ，$C$ 看做 $2$ … $Z$ 看做 $25$，那么我们就得到了一个 $26$ 进制的数字串。  </p><p>我们可以对这个字符串做一个操作：将两个位置的字母进行交换。这样得到了一个新的数字串。  </p><p>现在有一个十进制整数 $M$ ，请判断是否可以通过做至多一次（可以不做）操作，使得得到的字符串是 $M$ 的倍数。</p><p><code>输出格式</code>：  </p><p>第一行一个只包含大写字母的字符串。</p><p>第二行一个整数 $M$.  </p><p><code>输出格式</code>:</p><p>如果初始串就可以，那么输出 “0 0”（不加引号）</p><p>如果通过一次操作可以，请输出交换的两个位置的标号（标号小的在前，从 $1$ 开始）。如果有多解，输出字典序最小的。</p><p>如果做不到，那么输出 “-1 -1”（不加引号）</p><p><code>数据范围</code><br>字符串长度为$L$.<br>对于30%的数据：$1 \le L \ge 10$,$1 \le M \ge 100$  </p><p>对于50%的数据：除前面30%外，$1 \le L \ge 500$,$M = 5$或$25$或$260$  </p><p>对于100%的数据：$1 \le L \ge 2000,1 \le M \ge 200,000$  </p><p>样例输入：  </p><blockquote><p>NETTLE<br>35  </p></blockquote><p>样例输出：  </p><blockquote><p>1 2  </p></blockquote><p>样例解释：<br>交换$N$和第一个$E$。  </p><p>分析：  </p><ul><li><p>此题一看就是模拟题，但要注意数据范围以及运算时间的问题，如果使用pow（）函数的话不仅会超时，而且由于pow返回的是double类型的值会导致运算出错。因此使用一个数组在一开始就存储26的次方结果。同时此题还有一个坑就是字典序指的是标号的字典序而不是字符串的字典序。  </p></li><li><p>在求sum的时候只需将交换的两个值在不同位置的值求出来，将现在的两值之和减去原来的两值之和再加上sum，即为交换后的结果。</p></li><li><p>此题为了防止值超出范围还应活用mod。  </p></li></ul><p>关于mod的运算规则有如下几种：  </p><p>$(a + b)$ % $p=(a $% $p + b $%$ p) $%$ p $<br>$(a - b) $% $p=(a $% $p - b $%$ p) $% $p$<br>$(a \times b)$ % $p=(a $% $p \times b $%$ p) $% $p$<br>$(a \div b)$ % $p=(a $% $p \div b $%$ p) $% $p$  </p><p>为了防止出现负数一般对结果使用：<br>$ans = (ans$ % $\bmod$ $+$ $\bmod)$ %  $\bmod$  </p><p>代码：</p><pre><code class="c++"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="meta">#<span class="meta-keyword">define</span> MAX 0x7fffffff</span><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;<span class="keyword">const</span> ll N = <span class="number">2000</span>+<span class="number">10</span>;ll mod, dic[N];<span class="keyword">char</span> ss[N];<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{    <span class="built_in">scanf</span>(<span class="string">"%s%lld"</span>, ss, &amp;mod);    ll len = <span class="built_in">strlen</span>(ss), x = <span class="number">1</span>, sum = <span class="number">0</span>;    <span class="keyword">for</span>(ll i=len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)        dic[i] = x, sum += x*(ss[i]-<span class="string">'A'</span>), sum %= mod, x = x*<span class="number">26</span>%mod;    <span class="keyword">if</span>(!sum){        <span class="built_in">printf</span>(<span class="string">"0 0\n"</span>);        <span class="keyword">return</span> <span class="number">0</span>;    }    <span class="keyword">for</span>(ll i=<span class="number">0</span>; i&lt;len; ++i){        <span class="keyword">for</span>(ll j=i+<span class="number">1</span>; j&lt;len; ++j){            ll ans = sum;            ans = ans-dic[i]*(ss[i]-<span class="string">'A'</span>)-dic[j]*(ss[j]-<span class="string">'A'</span>);            ans = ans+dic[i]*(ss[j]-<span class="string">'A'</span>)+dic[j]*(ss[i]-<span class="string">'A'</span>), ans = ans%mod;            <span class="keyword">if</span>(!ans){                <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, i+<span class="number">1</span>, j+<span class="number">1</span>);                <span class="keyword">return</span> <span class="number">0</span>;            }        }    }    <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);    <span class="keyword">return</span> <span class="number">0</span>;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql命令</title>
      <link href="/2020/02/27/mysql%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/27/mysql%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p> 登录到本机上的mysql:    </p><blockquote><p>在配置好环境变量的前提下，打开命令行窗口：<br>mysql -h localhost -u root -p<br>随后输入mysql密码。  </p></blockquote><p>创建数据库：</p><blockquote><p>create database &lt;数据库名&gt;  </p></blockquote><p>显示数据库：  </p><blockquote><p>show databases;  </p></blockquote><p>删除数据库：  </p><blockquote><p>drop database &lt;数据库名&gt;  </p></blockquote><p>删除一个不确定是否存在的数据库名：  </p><blockquote><p>drop database if exists tmp  </p></blockquote><p>如果不存在此数据库的话，会返回一个警告显示此数据库不存在。  </p><p>连接数据库：  </p><blockquote><p>use &lt;数据库名&gt;  </p></blockquote><p>显示当前正在使用的数据库:  </p><blockquote><p>select database();  </p></blockquote><p>创建数据表：   </p><blockquote><p>create table&lt;表名&gt;）(&lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;])  </p></blockquote><p>向数据表中添加数据：  </p><blockquote><p>insert into 表名 values(…..);//insert一次只能插入一条记录。   </p></blockquote><p>查看表中所有数据：  </p><blockquote><p>select *from 表名  </p></blockquote><p>查询固定某项的数据：  </p><blockquote><p>select 类型 （as 别名） from 表名  </p></blockquote><p>如果想要使得到的数据去重：  </p><blockquote><p>select distinct 类型 from 表名  </p></blockquote><p>删除表中数据:  </p><blockquote><p>delete from 表名 where 类型名 =…  </p></blockquote><p>想要将某些类型进行拼接输出有如下函数：  </p><blockquote><p>select concat(…,…,…) as …(别名) from emp;  </p></blockquote><p>修改表中数据:  </p><blockquote><p>update 表名 set 字段=新值 where 条件<br>update myclass set name=’we’ where id=1;  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2020/02/22/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2020/02/22/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>引爆炸弹：<br><a href="https://res.jisuanke.com/img/upload/20170327/5dba781484cd6db80572f3bd5fe136b93e3b2e60.png" data-fancybox="group" data-caption="alt photo" class="fancybox"><img alt="alt photo" title="alt photo" data-src="https://res.jisuanke.com/img/upload/20170327/5dba781484cd6db80572f3bd5fe136b93e3b2e60.png" class="lazyload"></a>  </p><p>题目描述：<br>在一个$n \times n $的方格地图上，某些方格上放置着炸弹。手动引爆一个炸弹以后，炸弹会把炸弹所在的行和列上的所有炸弹引爆，被引爆的炸弹又能引爆其他炸弹，这样连锁下去。  </p><p>现在为了引爆地图上的所有炸弹，需要手动引爆其中一些炸弹，为了把危险程度降到最低，请算出最少手动引爆多少个炸弹可以把地图上的所有炸弹引爆。</p><p>输入格式<br>第一行输两个整数 n,m，用空格隔开。</p><p>接下来 n 行，每行输入一个长度为 m 的字符串，表示地图信息。0表示没有炸弹，1表示炸弹。</p><p>数据约定：</p><p>对于 60\%60% 的数据：1 \le n, m \le 1001≤n,m≤100；</p><p>对于 100\%100% 的数据：1 \le n, m \le 10001≤n,m≤1000；</p><p>数据量比较大，不建议用cin输入。</p><p>输出格式<br>输出一个整数，表示最少需要手动引爆的炸弹数。  </p><p>此题为并查集，进行归一化处理，将行数与列数看做一种数，所有的炸弹只要行数或列数有一个相同就会归为一个集合，只有行数、列数都不同的炸弹才属于新的集合。只需遍历所有炸弹位置，统计有多少炸弹集合。  </p><p>样例输入：<br>5   5<br>00010  </p><p>00010  </p><p>01001  </p><p>10001  </p><p>01000  </p><p>输出：2</p><p>代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">10010</span>][<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10010</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=x;</span><br><span class="line">    <span class="keyword">while</span>(x!=pre[x])</span><br><span class="line">    &#123;</span><br><span class="line">        x=pre[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(a!=pre[a])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> z=a;</span><br><span class="line">        a=pre[a];</span><br><span class="line">        pre[z]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Fa=<span class="built_in">find</span>(a);</span><br><span class="line">    <span class="keyword">int</span> Fb=<span class="built_in">find</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(Fa!=Fb)</span><br><span class="line">    pre[Fa]=Fb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">map</span>[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">'1'</span>) &#123;</span><br><span class="line">                Union(i,j+n);</span><br><span class="line">                <span class="comment">// cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt;pre[i]&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">'1'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">int</span> a=<span class="built_in">find</span>(i);</span><br><span class="line">                <span class="keyword">if</span>(!vis[a])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[a]=<span class="literal">true</span>;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>POJ 1182食物链<br>题目：<br>动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。  </p><p>现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。  </p><p>有人用两种说法对这N个动物所构成的食物链关系进行描述：  </p><p>第一种说法是”1 X Y”，表示X和Y是同类。  </p><p>第二种说法是”2 X Y”，表示X吃Y。  </p><p>此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。   </p><p>1） 当前的话与前面的某些真的话冲突，就是假话；<br>2） 当前的话中X或Y比N大，就是假话；<br>3） 当前的话表示X吃X，就是假话。<br>你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。   </p><p>输入：<br>100 7</p><p>1 101 1 </p><p>2 1 2</p><p>2 2 3 </p><p>2 3 3 </p><p>1 1 3 </p><p>2 3 1 </p><p>1 5 5</p><p>输出：<br>3</p><p>此题需明白的点为如果现在的说法与之前矛盾则为假话，因而将一开始最初说的话进行Union，然后每次添加新的情况时都要先进行判断，再进行添加。  </p><p>代码：  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">150014</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">finda</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=a;</span><br><span class="line">    <span class="keyword">while</span>(pre[x]!=x)</span><br><span class="line">    &#123;</span><br><span class="line">        x=pre[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> finda(n)==finda(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> f1=finda(x);</span><br><span class="line">      <span class="keyword">int</span> f2=finda(y);</span><br><span class="line">      <span class="keyword">if</span>(f1!=f2)</span><br><span class="line">       pre[f1]=f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n*<span class="number">3</span>;i++)</span><br><span class="line">        pre[i]=i;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100005</span>],b[<span class="number">100005</span>],c[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i],&amp;b[i],&amp;c[i]);</span><br><span class="line">        <span class="keyword">int</span> x=b[i]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> y=c[i]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=n||y&lt;<span class="number">0</span>||y&gt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(same(x,y+n)||same(x,y+<span class="number">2</span>*n))</span><br><span class="line">                num++;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                merge(x,y);</span><br><span class="line">                merge(x+n,y+n);</span><br><span class="line">                merge(x+<span class="number">2</span>*n,y+<span class="number">2</span>*n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(same(x,y)||same(x,y+<span class="number">2</span>*n))</span><br><span class="line">                num++;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                merge(x,y+n);</span><br><span class="line">                merge(x+n,y+<span class="number">2</span>*n);</span><br><span class="line">                merge(x+<span class="number">2</span>*n,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java方法参数</title>
      <link href="/2020/02/21/java%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/"/>
      <url>/2020/02/21/java%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="java方法参数"><a href="#java方法参数" class="headerlink" title="java方法参数"></a>java方法参数</h1><p>程序设计语言中有关将参数传递给函数的方法有两种，一种是按值调用而另一种是按引用调用。<br>以c++作例子来说。  </p><ul><li><p>值调用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>引用调用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以上两种例子分别代表了大多数语言的参数传递方式，但对于java语言来说，尽管有一部分人认为java也存在引用传递，但通过具体事例来看java只存在值传递一种传递方式。  </p></li></ul><p>现定义一函数：   </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleValue</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=<span class="number">3</span>*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行调用。</span></span><br><span class="line"><span class="keyword">double</span> percent=<span class="number">10</span>;</span><br><span class="line">tripleValue(percemt);</span><br></pre></td></tr></table></figure></div><p>在上述函数执行之后percent并没有变为原先的二倍，函数的具体过程如下：  </p><ol><li>x被初始化为percent值的一个拷贝。  </li><li>x被乘以3后等于30.但percent仍为10；</li><li>方法结束后局部变量x被丢弃。    </li></ol><p>即等价于：percent=10;x=10;x的变化并不会影响percent值的变化。  </p><p>一个方法不可能修改一个基本数据类型的参数，但作为对象的引用的参数结果就截然不同了。<br>定义了一个Employee类，类中有一薪金提高操作：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    salary=salary*(<span class="number">1</span>+x/<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>若要使职工新进提高两倍可使用如下方法：  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当调用：</p><blockquote><p>harry=new Employee(…..);<br>tripleSalary(harry);  </p></blockquote><p>即如图所示：<br><a href="https://imgchr.com/i/32wYGj" data-fancybox="group" data-caption="alt photo" class="fancybox"><img alt="alt photo" data-src="https://imgchr.com/i/32wYGj" class="lazyload" title="alt photo"></a></p><p>具体执行过程为：</p><ol><li>x被初始化为harry值的拷贝，此处为对象的引用  </li><li>raiseSalary方法应用于对象引用时，x和harry同时引用了Employee对象的薪金函数，从而致使salary最终变为3倍。  </li><li>方法结束后，x倍销毁，但harry的引用会使salary一直保持3倍的状态。  </li></ol><p>即等价于：Employee x=harry;x.raiseSalary(200)==harry.raiseSalary(200);<br>当x调用了raiseSalary方法，其由于harry同样引用了Employee里的raiseSalary方法，因而他们都会发生变化。通俗来说是Employee内的东西发生了改变，致使所有引用它的对象都发生了改变。</p><p>使用swap函数仍然可以证明java使用引用传递：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title">Swap</span><span class="params">(Employee A,Employee B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Employee tmp=A;</span><br><span class="line">    A=B;</span><br><span class="line">    b=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用：</span></span><br><span class="line">Employee x=<span class="keyword">new</span> Employee(...);</span><br><span class="line">Employee y=<span class="keyword">new</span> Employee(...);</span><br><span class="line">Swap(x,y);</span><br></pre></td></tr></table></figure></div><p>结果对象x与对象y并没有发生变化。  </p><p>其示意图如下：<br><a href="https://imgchr.com/i/32wJiQ" data-fancybox="group" data-caption="alt photo" class="fancybox"><img alt="alt photo" data-src="https://imgchr.com/i/32wJiQ" class="lazyload" title="alt photo"></a>  </p><p>其原理即如图所示，通过图示可以看出swap函数改变的仅仅是A和B向Employee指向的线，不论他们如何变化，都始终影响不到对象x和y。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java：文件输入输出</title>
      <link href="/2020/02/19/java%EF%BC%9A%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
      <url>/2020/02/19/java%EF%BC%9A%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="java的文件输入输出"><a href="#java的文件输入输出" class="headerlink" title="java的文件输入输出"></a>java的文件输入输出</h1><h2 id="文件输入"><a href="#文件输入" class="headerlink" title="文件输入"></a>文件输入</h2><p>在java中要想对文件进行读取则需要使用File对象构造一个Scanner对象：<br><code>Scanner in=new Scanner(Paths.get(&quot;文件名/文件位置&quot;)，&quot;字符编码形式&quot;);</code><br>在文件读取时既可以在相对位置创建文本文件后，使用文件名进行读取，也可以直接使用文件绝对位置进行读取：</p><ol><li><p>使用文件名：<br>当指定一个相对的文件名时，例如”myfile.txt”，文件会位于Java虚拟机启动路径的相对位置（一般位于该java project的同层目录）。可以使用：<br><code>String dir =System.getProperty(&quot;user.dir&quot;);</code><br>文件读取：<br><code>Scanner in=new Scanner(Paths.get(&quot;myfile.txt&quot;)，&quot;UTF-8&quot;);</code>  </p></li><li><p>使用绝对路径：<br><code>Scanner in=new Scanner(Paths.get(&quot;D://Java//Projects//myfile.txt&quot;)，&quot;UTF-8&quot;);</code><br>值得注意的是如果文件名含有反斜杠符号，需要在反斜杠符号之前再添加一个反斜杠。  </p></li></ol><h2 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h2><p>要想写入文件则需要构造一个PrintWriter对象：<br><code>PrintWriter out=new PrintWriter(&quot;文件名&quot;，&quot;字符编码&quot;);</code>  </p><p>对于文件明的处理与文件输入时一样。  除此之外在构造完成并进行输出操作之后，还需要对缓存区进行清理并关闭读写流，因而需要使用：<br><code>out.flus()</code>，以及<code>out.close</code> 。如果不使用out.flus则文件不会输出成功，因为数据还会留存在缓冲区里，不会输出在文件中。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>一下是将数据从一个文件读入并输出到另一个文件的代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       Scanner in =<span class="keyword">new</span> Scanner(Paths.get(<span class="string">"pw.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">       PrintWriter out=<span class="keyword">new</span> PrintWriter(<span class="string">"1.txt"</span>,<span class="string">"UTF-8"</span>);</span><br><span class="line">       out.print(in.next());</span><br><span class="line">       out.flush();</span><br><span class="line">       out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex公式总结</title>
      <link href="/2020/02/13/latex%E5%85%AC%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/13/latex%E5%85%AC%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在博客撰写的过程中不免会遇到各种数理公式的使用，因而当撰写markdown文档时如需添加数学公式，可以使用两个美元符号$$包裹TeX或LaTeX格式的数学公式来实现，当提交之后，文章页会调用Mathjax对数学公式进行渲染。  </p><h1 id="公式的具体实现"><a href="#公式的具体实现" class="headerlink" title="公式的具体实现"></a>公式的具体实现</h1><p>在行中的公式可以采用单$表示：  </p><blockquote><p><code>$$`` 数学公式</code>$$   </p></blockquote><p>独立公式则采用双$表示：   </p><blockquote><p><script type="math/tex">$$ 数学公式 `</script>  `</p></blockquote><h2 id="声调以及变音符号"><a href="#声调以及变音符号" class="headerlink" title="声调以及变音符号"></a>声调以及变音符号</h2><blockquote><p>\dot{a}(<code>一点a</code>), \ddot{a}（<code>两点a</code>）, \acute{a}（<code>第二声</code>）, \grave{a}（<code>第四声</code>）  </p></blockquote><p>$\dot{a}, \ddot{a}, \acute{a}, \grave{a} $  </p><blockquote><p>\check{a}（<code>第三声</code>）, \breve{a}, \tilde{a}, \bar{a}（<code>第一声</code>）  </p></blockquote><p>$ \check{a}, \breve{a}, \tilde{a}, \bar{a} $  </p><blockquote><p>\hat{a}, \widehat{a}, \vec{a}（<code>向量</code>）  </p></blockquote><p>$ \hat{a}, \widehat{a}, \vec{a} $  </p><h2 id="标准函数"><a href="#标准函数" class="headerlink" title="标准函数"></a>标准函数</h2><p>指数：  </p><blockquote><p>exp_a b =a^b,    \exp b =e^b,    10^m  </p></blockquote><p>$exp_a b= a^b, \exp b =e^b, 10^m $  </p><p>对数：  </p><blockquote><p>\ln c,    \lg d = \log e,    \log_{<code>底数</code>} <code>指数</code>   </p></blockquote><p>$\ln c, \lg d= \log e, \log_{2} 3 $  </p><p>三角函数：  </p><blockquote><p>\sin a, \cos b, \tan c, \cot d, \sec e, \csc f, \arcsin a, \arccos b, \arctan c, \arccot d  </p></blockquote><p>$\sin a, \cos b, \tan c, \cot d, \sec e, \csc f, \arcsin a, \arccos b, \arctan c, arccot d$  </p><h2 id="符号函数，绝对值："><a href="#符号函数，绝对值：" class="headerlink" title="符号函数，绝对值："></a>符号函数，绝对值：</h2><blockquote><p>\sgn r, \left\vert s \right\vert  </p></blockquote><p>$\left\vert s \right\vert$  </p><h2 id="最值和极限："><a href="#最值和极限：" class="headerlink" title="最值和极限："></a>最值和极限：</h2><blockquote><p>\min(x,y) ,\max(x,y)  </p></blockquote><p>$\min(x,y) ,\max(x,y)$  </p><blockquote><p>\min x, \min y, \inf s, \sup t  </p></blockquote><p>$\min x, \min y, \inf s, \sup t$  </p><blockquote><p>\lim u，  lim_{x \to  \infty} \frac{1}{n(n+1)}  </p></blockquote><p>$\lim u,    \lim_{x \to   \infty} \frac{1}{n(n+1)}$  </p><h2 id="微积分及导数"><a href="#微积分及导数" class="headerlink" title="微积分及导数"></a>微积分及导数</h2><blockquote><p>dt  ,\mathrm{d}t,  \partial t,  \nabla\psi  </p></blockquote><p>$dt,  \mathrm{d}t,  \partial t,  \nabla\psi$   </p><blockquote><p>dy/dx,  \mathrm{d}y/\mathrm{d}x,  \frac{\mathrm{d}y}{\mathrm{d}x},  \frac{\partial^2}{\partial x_1\partial x_2}y  </p><p>\prime, \backprime, f^\prime, f’, f’’, f^{(3)}, \dot y, \ddot y  </p></blockquote><p>$\prime,  \backprime, f^\prime, f’, f’’ ,f^{(3)}, \dot y, \ddot y$  </p><blockquote><p>\infty<br>$\infty$   </p></blockquote><h2 id="根号"><a href="#根号" class="headerlink" title="根号"></a>根号</h2><blockquote><p>\surd,  \sqrt{2},  \sqrt[n]{},  \sqrt[3]{\frac{x^3+y^3}{2}}  </p></blockquote><p>$\surd,   \sqrt{2},   \sqrt[n]{2},  \sqrt[3]{\frac{x^3+y^3}{2}}$  </p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p>+, -, \pm, \mp, \dotplus   </p></blockquote><p>$+ , - , \pm, \mp, \dotplus$  </p><blockquote><p>\times,  \div, \divideontimes, /, \backslash   </p></blockquote><p>$\times , \div, \divideontimes, / , \backslash$  </p><blockquote><p>\oplus, \ominus, \otimes, \oslash, \odot</p></blockquote><p>$\oplus, \ominus, \otimes, \oslash, \odot$</p><blockquote><p>\bigoplus,  \bigotimes, \bigodot  </p></blockquote><p>$\bigoplus, \bigotimes, \bigodot$  </p><h2 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h2><blockquote><p>s_k \equiv 0 \pmod{m}  </p></blockquote><p>$s_k \equiv 0 \pmod{m}$  </p><blockquote><p>a \bmod b  </p></blockquote><p>$a \bmod b$  </p><blockquote><p>\gcd(m,n), \operatorname{lcm}(m,n)  </p></blockquote><p>$\gcd(m,n), \operatorname{lcm}(m,n)$  </p><blockquote><p>\mid, \nmid, \shortmid, \nshortmid</p></blockquote><p>$\mid, \nmid, \shortmid, \nshortmid$  </p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><blockquote><p>\emptyset, \varnothing  </p></blockquote><p>$\emptyset, \varnothing$  </p><blockquote><p>\in, \notin  \not\in, \ni, \not\ni  </p></blockquote><p>$\in, \notin  \not\in,\ni,\not\ni$  </p><blockquote><p>\cap, \Cap, \sqcap, \bigcap</p></blockquote><p>$\cap, \Cap, \sqcap, \bigcap$</p><blockquote><p>\cup, \Cup, \sqcup, \bigcup </p></blockquote><p>$\cup, \Cup, \sqcup, \bigcup$</p><blockquote><p>\setminus ,\times  </p></blockquote><p>$\setminus ,\times$  </p><blockquote><p>\subset, \Subset, \sqsubset </p></blockquote><p>$\subset, \Subset, \sqsubset$</p><blockquote><p>\supset, \Supset, \sqsupset</p></blockquote><p>$\supset, \Supset, \sqsupset$</p><blockquote><p>\subseteq, \nsubseteq</p></blockquote><p>$\subseteq, \nsubseteq$  </p><blockquote><p>\supseteq, \nsupseteq </p></blockquote><p>$\supseteq, \nsupseteq$</p><blockquote><p>\subseteqq, \nsubseteqq </p></blockquote><p>$\subseteqq, \nsubseteqq$  </p><blockquote><p>\supseteqq, \nsupseteqq  </p></blockquote><p>$\supseteqq, \nsupseteqq$ </p><h2 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h2><blockquote><p>=, \ne, \neq, \equiv, \not\equiv  </p></blockquote><p>$=, \ne, \neq, \equiv, \not\equiv$  </p><blockquote><p>\doteq, \doteqdot  </p></blockquote><p>$\doteq, \doteqdot$  </p><blockquote><p>\sim, \nsim, \backsim, \thicksim, \simeq, \backsimeq, \eqsim, \cong, \ncong  </p></blockquote><p>$\sim, \nsim, \backsim, \thicksim, \simeq, \backsimeq, \eqsim, \cong, \ncong$  </p><blockquote><p>\approx, \thickqpprox, \approxeq, \propto, \varpropto  </p></blockquote><p>$\approx, \thickapprox, \approxeq, \propto, \varpropto$  </p><blockquote><p>\&lt;, \nless, \ll, \not\ll, \lll, \not\lll,\lessdot  </p></blockquote><p>$&lt;, \nless, \ll, \not\ll, \lll, \not\lll,\lessdot$  </p><blockquote><p>/&gt;, \ngte, \gg, \not\gg, \ggg, \not\ggg, \gtrdot  </p></blockquote><p>$&gt;, \ngtr, \gg, \not\gg, \ggg, \not\ggg, \gtrdot$</p><blockquote><p>\le, \leq, \lneq, \leqq  </p></blockquote><p>$\le, \leq, \lneq, \leqq$  </p><blockquote><p>\ge, \geq, \gneq, \geqq  </p></blockquote><p>$\ge, \geq, \gneq, \geqq$  </p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>康托展开</title>
      <link href="/2020/02/10/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
      <url>/2020/02/10/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<h1 id="康托展开"><a href="#康托展开" class="headerlink" title="康托展开"></a>康托展开</h1><h2 id="定义即公式"><a href="#定义即公式" class="headerlink" title="定义即公式"></a>定义即公式</h2><p>康托展开表示的是全排列到自然数的映射，康托展开的本质即为某一全排列在整个全排列序列中的顺序。即<code>1 3 2</code>在由<code>1,2,3</code>三个数组成的全排列中的顺序为2。同时此项展开是一个可逆的过程，存在正向运算以及逆向运算。公式为：  </p><blockquote><p>X= a[n] <em> (n-1)! + a[n-1]</em>(n-2)!+ … +a[i] <em> (i-1)! + … + a[1] </em> 0!   </p></blockquote><p>其中a[i]为整数，并且 0&lt;= a[i]  &lt; i, 1&lt;= i &lt;=n.<br>a[i]:设x为一串数字或字符串中第i个元素，a[i]即表示x之后的元素中比x小的元素的个数。<br>例如序列： 3 2 1<br>X=2 <em> 2！+1 </em> 1!+ 0 * 0!=5;  </p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>由康托展开的公式可知：n位（0~n-1）全排列后，其康托展开唯一且最大约为n!，因此可以由更小的空间来储存这些排列。由公式可将X逆推出对应的全排列。因此康托展开多用于构建哈希表时的空间压缩。  </p><h2 id="例题代码"><a href="#例题代码" class="headerlink" title="例题代码"></a>例题代码</h2><p>现在有”abcdefghijkl”12个字符，将其所有的排列中按字典序排列，给出任意一种排列，说出这个排列在所有的排列中是第几小的？<br>  <strong><em>输入</em></strong> ： </p><p>每行输入一行字符串，保证是a~l这12个字符的某种排列<br>EOF结束</p><p><strong><em>输出</em></strong>：  </p><p>输出一个整数，代表这个排列排在第几位。<br>样例输入：<br>abcdefghijkl<br>abcdefghiklj<br>gfkedhjblcia  </p><p>样例输出1：<br>0<br>3<br>260726925  </p><p>代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>||i==<span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i*factorial(i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;s.<span class="built_in">size</span>();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j]&lt;s[i])</span><br><span class="line">&#123;</span><br><span class="line">tmp++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans+=factorial(s.<span class="built_in">size</span>()-i<span class="number">-1</span>)*tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><br>逆康托公式：即给出序号，输出排列：<br>代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span> || k == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> k * factor(k<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">105</span>], book[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k, m, key, x, j;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="built_in">memset</span>(book, <span class="number">0</span>, <span class="keyword">sizeof</span> book);</span><br><span class="line">--n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=m;++i)&#123;</span><br><span class="line">k = factor(m-i);</span><br><span class="line">key = n/k+<span class="number">1</span>;</span><br><span class="line">n %= k;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(key)&#123;</span><br><span class="line"><span class="keyword">if</span>(!book[j]) --key;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">ans[i] = j<span class="number">-1</span>;</span><br><span class="line">book[j<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 康托展开 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitset的用法（十进制转二进制）</title>
      <link href="/2020/02/04/bitset%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2020/02/04/bitset%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="bitset的用法（十进制转二进制）"><a href="#bitset的用法（十进制转二进制）" class="headerlink" title="bitset的用法（十进制转二进制）"></a>bitset的用法（十进制转二进制）</h1><p>C++的bitset存在于<code>&lt;bitset&gt;</code>的头文件中，是一种类似于数组的结构，它的每一个元素只能是0或1，因而多用于十进制到二进制的转化类问题的解决。bitset的基本格式为:  </p><blockquote><p>bitset&lt;保留的位数&gt; b(要求的十进制数)  </p></blockquote><p>bitset常见构造：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;2&gt; b(<span class="number">11</span>);<span class="comment">//11的二进制1011，保留后两位为为11；</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;5&gt; b(<span class="number">11</span>);<span class="comment">//5位超过4位，所以添加0，为01011；  </span></span><br><span class="line">b.to_string();<span class="comment">//将其转化为字符串类型；</span></span><br></pre></td></tr></table></figure></div></p><h2 id="在例题中的使用："><a href="#在例题中的使用：" class="headerlink" title="在例题中的使用："></a>在例题中的使用：</h2><h3 id="蓝桥杯明码："><a href="#蓝桥杯明码：" class="headerlink" title="蓝桥杯明码："></a>蓝桥杯明码：</h3><p>标题：明码  </p><p>汉字的字形存在于字库中，即便在今天，16点阵的字库也仍然使用广泛。<br>16点阵的字库把每个汉字看成是16x16个像素信息。并把这些信息记录在字节中。  </p><p>一个字节可以存储8位信息，用32个字节就可以存一个汉字的字形了。<br>把每个字节转为2进制表示，1表示墨迹，0表示底色。每行2个字节，<br>一共16行，布局是：  </p><p>第1字节，第2字节  </p><p>第3字节，第4字节  </p><p>….  </p><p>第31字节, 第32字节  </p><p>1  </p><p>2  </p><p>3  </p><p>4  </p><p>这道题目是给你一段多个汉字组成的信息，每个汉字用32个字节表示，这里给出了字节作为有符号整数的值。<br>题目的要求隐藏在这些信息中。你的任务是复原这些汉字的字形，从中看出题目的要求，并根据要求填写答案。  </p><p>这段信息是（一共10个汉字）：  </p><p>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0  </p><p>16 64 16 64 34 68 127 126 66 -124 67 4 66 4 66 -124 126 100 66 36 66 4 66 4 66 4 126 4 66 40 0 16  </p><p>4 0 4 0 4 0 4 32 -1 -16 4 32 4 32 4 32 4 32 4 32 8 32 8 32 16 34 16 34 32 30 -64 0  </p><p>0 -128 64 -128 48 -128 17 8 1 -4 2 8 8 80 16 64 32 64 -32 64 32 -96 32 -96 33 16 34 8 36 14 40 4  </p><p>4 0 3 0 1 0 0 4 -1 -2 4 0 4 16 7 -8 4 16 4 16 4 16 8 16 8 16 16 16 32 -96 64 64  </p><p>16 64 20 72 62 -4 73 32 5 16 1 0 63 -8 1 0 -1 -2 0 64 0 80 63 -8 8 64 4 64 1 64 0 -128  </p><p>0 16 63 -8 1 0 1 0 1 0 1 4 -1 -2 1 0 1 0 1 0 1 0 1 0 1 0 1 0 5 0 2 0  </p><p>2 0 2 0 7 -16 8 32 24 64 37 -128 2 -128 12 -128 113 -4 2 8 12 16 18 32 33 -64 1 0 14 0 112 0  </p><p>1 0 1 0 1 0 9 32 9 16 17 12 17 4 33 16 65 16 1 32 1 64 0 -128 1 0 2 0 12 0 112 0  </p><p>0 0 0 0 7 -16 24 24 48 12 56 12 0 56 0 -32 0 -64 0 -128 0 0 0 0 1 -128 3 -64 1 -128 0 0<br>用上述的库函数可以很简单的解决：<br>代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">   <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="built_in">bitset</span>&lt;8&gt; b(n);</span><br><span class="line">   s=b.to_string();</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> </span><br><span class="line">   &#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">bitset</span>&lt;8&gt; q(m);</span><br><span class="line">   s=q.to_string();</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'1'</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><br>结果显示为：   </p><p><a href="http://q4wxf2l6s.bkt.clouddn.com/20180402083607793.png" data-fancybox="group" data-caption="RUNOOB tu" class="fancybox"><img alt="RUNOOB tu" title="RUNOOB tu" data-src="http://q4wxf2l6s.bkt.clouddn.com/20180402083607793.png" class="lazyload"></a>    </p>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 二进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dp背包问题</title>
      <link href="/2020/01/31/dp%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/31/dp%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h2><ul><li>问题描述：<br>有一个包和n个物品，包的容量为m，每个物品都有各自的体积和价值，问当从这n个物品中选择多个物品放在包里而物品体积总数不超过包的容量m时，能够得到的最大价值是多少？<code>(对于每个物品不可以取多次，最多只能取一次，之所以叫做0-1背包，0表示不取，1表示取)</code><br>此题的每个物品的数量是有限的，对于每个物体只有两种可能，要么不取，要么取。  </li><li>状态转移方程为：<blockquote><p>dp[i+1][j]=dp[i][j] ( j &lt; w[i] ); //即第i个物品的重量太大，不选<br>dp[i+1][j]=max(dp[i][j-w[i]]+v[i],dp[i][j])( 其他 ) //即第i个物品满足，可以选择，也可以不选择；  </p></blockquote></li></ul><p>其中<code>dp[i+1][j]</code>表示从前i个物品中选出总重量不超过j的物品时总价值的最大值，且<code>dp[0][j]=0</code>。  </p><ul><li>代码：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="keyword">int</span> dp[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> W;</span><br><span class="line"><span class="keyword">int</span> w[MAXN],v[MAXN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=W;j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=W;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;w[i])</span><br><span class="line">&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][j]=dp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(dp[i][j],dp[i][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n][W]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>此时的时间复杂度为: <strong><em>O（nW）</em></strong>;<h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2>完全背包问题与0-1背包问题的区别在于完全背包的每个物品的数量为固定数量，因而转移状态方程发生了变化：<blockquote><p>dp[i+1][j]=max{dp[i-k<em>w[i]]+k</em>v[i] | 0&lt;=k}<br>dp[0][j]=0;  </p></blockquote></li></ul><p>其中<code>dp[i+1][j]表示从前i种物品中挑选总重量不超过j时总价值的最大值</code>。<br>代码:<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 101</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> W;</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=W;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k*w[i]&lt;=j;k++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][j],dp[i][j-k*w[i]]+k*v[i]);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n][W]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><br>此时形成了一个三重循环，时间复杂度为<strong><em>O(nW^2)</em></strong>,显然不够好，从状态转移方程以及方程意义来看，其中在dp[i+1][j]的计算中选择k(k&gt;=1)的情况，与在dp[i+1][j-w[i]]的计算结果中选择k-1个的情况是一样的，这就造成了大量的重复计算，对状态转移方程进行化简：</p><blockquote><p>&#160;&#160;&#160;max{dp[i][j-k<em>w[i]]+k</em>v[i]|0&lt;=k}<br>= max(dp[i][j],max(dp[i][j-k<em>w[i]]+k</em>v[i]|k&gt;=1))<br>= max(dp[i][j],max{dp[i][j-w[i]-k<em>w[i]]+k</em>v[i]|k&gt;=0}+v[i]<br>= max(dp[i][j],dp[i+1][j-w[i]]+v[i])  </p></blockquote><p>根据化简结果可得优化后的代码为：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 101</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ap[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> W;</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=W;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;w[i])</span><br><span class="line">&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][j]=dp[i][j]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(dp[i][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n][W]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><br>此时的时间复杂度与0-1背包相同为：<strong><em>O (nW)</em></strong>  </p><h2 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h2><p>对于上述的两个问题<strong><em>O (nW)</em></strong>的时间复杂度已经是最优化的状态了，但代码的空间复杂度还可以进行优化。观察上述代码可以将表示状态转移方程的二维数组化为一位，代码如下：<br>0-1背包问题：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> W;</span><br><span class="line"><span class="keyword">int</span> w[MAXN],v[MAXN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=W;j&gt;=w[i];j--)</span><br><span class="line">&#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n][W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>完全背包问题：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c++</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> W;</span><br><span class="line"><span class="keyword">int</span> w[MAXN],v[MAXN];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=w[i];j&lt;=W;j++)</span><br><span class="line">&#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n][W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><br>由上面的两个代码比较可知一维数组的0-1和完全背包问题的区别仅在于循环的方向，那么为什么0-1背包的方向为逆序而完全背包为正序呢？原因还是在于状态转换方程。对于0-1背包问题来说：<code>dp[i+1][j]=dp[i][j] or dp[i][j-w[i]+v[i]</code>,现状态由且仅由上一个状态的转换方程决定，因而j从W开始，此时的<code>dp[j-w[i]]+v[i]</code>所代表的值由于j是从大到小的顺序，j的每一个取值的结果都是由上一个状态的值推出，但对于完全背包问题：<code>dp[i+1][j]=max(dp[i][j],dp[i+1][j-w[i]]+v[i])</code>,其结果是由当前状态推出。因而j的取值需要从小到大进行，有本次状态转移方程的值推出后续的本次状态转移方程的值，因而会存在逆序的差异。</p>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关操作</title>
      <link href="/2020/01/29/Git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/01/29/Git%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h1><h2 id="创建-Git仓库："><a href="#创建-Git仓库：" class="headerlink" title="创建 Git仓库："></a>创建 Git仓库：</h2><h3 id="在当前目录新建一个Git代码库"><a href="#在当前目录新建一个Git代码库" class="headerlink" title="在当前目录新建一个Git代码库"></a>在当前目录新建一个Git代码库</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></div><h3 id="新建一个目录，将其初始化为Git代码库"><a href="#新建一个目录，将其初始化为Git代码库" class="headerlink" title="新建一个目录，将其初始化为Git代码库"></a>新建一个目录，将其初始化为Git代码库</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git init [project-name]</span><br></pre></td></tr></table></figure></div><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>将文件添加到仓库分为两步：<code>add</code>和<code>commit</code>,其中commit部分可以添加适当的说明文字，以便版本回溯时参考使用。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add filename</span><br><span class="line">$ git commit-m&quot;discribtion words&quot;</span><br></pre></td></tr></table></figure></div><br>此外可以add多个文件后再统一commit，也可以add一次，commit一次。  </p><h2 id="状态以及过程"><a href="#状态以及过程" class="headerlink" title="状态以及过程"></a>状态以及过程</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>可以运行<code>git status</code>命令查看git的提交状态，此外当对文件进行修改之后，还未<code>commit</code>的时候可以使用<code>git diff</code>查看具体修改了什么。   </p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure></div><p>顾名思义log有航海日记得意思，<code>git log</code>命令是显示最近到最远的提交日志，但这个命令得到的消息较为繁琐。<br>添加’—pretty=oneline’参数：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty&#x3D;online</span><br></pre></td></tr></table></figure></div><br>则将日志信息精简为只有<code>commit id（版本号）</code>的样式。  </p><h2 id="版本回溯"><a href="#版本回溯" class="headerlink" title="版本回溯"></a>版本回溯</h2><p>当出现错误，或想要回到修改提交过的版本时只需要<code>git reset</code>命令即可。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$git reset --hard HEAD</span><br><span class="line">$git reset --hard HEAD^</span><br></pre></td></tr></table></figure></div><br>第一个指令是回溯到上一个版本，加上一个<code>^</code>则是再向前回溯一个版本，依次类推，加上几个 <code>^</code> 符号就是再次向前回退几个版本。当然这种命令存在一定的局限性，因为命令的格式随着回推的进行变得越来越繁琐，因而在上一条介绍中提到的<strong>版本号</strong>就派上了用场：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit id</span><br></pre></td></tr></table></figure></div><br>版本号无需写全，只需写入前4,5位即可。<br>此外除了<code>git log</code>可以查到版本号，使用指令<code>git reflog</code>可以更好更直观的找到之前的版本号，以便进行回溯。</p><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><h2 id="提交前"><a href="#提交前" class="headerlink" title="提交前"></a>提交前</h2><p>当尽行修改或是删除之后，过还没有进行提交，则可以使用：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout filename</span><br></pre></td></tr></table></figure></div><br>进行撤销操作，可以丢弃掉工作区的修改，使其恢复修改前的状态。  </p><h2 id="提交后"><a href="#提交后" class="headerlink" title="提交后"></a>提交后</h2><p>当你已经提交，即已经<code>git add</code>但还没有<code>git commit</code>之时，则需：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD filename</span><br></pre></td></tr></table></figure></div><br>可以将暂存区的修改撤销，重新放回工作区。  </p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除操作只有两步，将工作区的文件删去，将版本库中的文件删去。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm filename  </span><br><span class="line">$ git rm filename  </span><br><span class="line">$ git commit -m &quot;discribtions&quot;</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/01/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/01/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="我的一篇博文-markdown编写规则"><a href="#我的一篇博文-markdown编写规则" class="headerlink" title="我的一篇博文(markdown编写规则)"></a>我的一篇博文(markdown编写规则)</h1><h2 id="My-first-blog"><a href="#My-first-blog" class="headerlink" title="My first blog."></a>My first blog.</h2><h3 id="This-is-my-first-article-in-my-blog"><a href="#This-is-my-first-article-in-my-blog" class="headerlink" title="This is my first article in my blog!"></a>This is my first article in my blog!</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">666</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"it's gonna to be successful!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>在markdown文档中使用”#”来区分标题，一个”#”表示一级标题，两个”#”表示二级标题，以此类推；<br>例子如下：  </p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h1><p>对于markdown文档来说，段落的换行需要两个空格加上一个回车，当然也可以在段落的后面使用一个空行来表示重新开始一个段落。  </p><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>markdown文档常用的有六种字体表示方法如下：  </p><p><code>*斜体文本*</code><br><code>**粗体文本**</code><br><code>***粗斜体文本***</code>  </p><p>效果如下：<br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong>      </p><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>你可以在一行中用三个以上的星号、减号来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格（<strong><em>减号必须插入空格</em></strong>）。下面每种写法都可以建立分隔线：表示方法方法如下：<br><code>***</code> 或 <code>* * *</code> 或 <code>- - -</code><br>效果如下：  </p><hr><hr><hr><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：<br><code>~jackeylove~</code><br>效果如下：<br><del>jackeylove</del>    </p><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p><code>通过html中的&lt;u&gt;实现</code>，效果如下：<br><u>The Big Bang Theory</u>    </p><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>脚注是对文本的补充说明，markdown文档的脚注格式为<code>[^要注明的文本]</code><br>效果如下：<br>创建脚注格式类似这样 <sup><a href="#fn_RUNOOB" id="reffn_RUNOOB">RUNOOB</a></sup>。</p><blockquote id="fn_RUNOOB"><sup>RUNOOB</sup>. 薄雾浓云愁永昼，瑞脑消金兽  <a href="#reffn_RUNOOB" title="Jump back to footnote [RUNOOB] in the text."> &#8617;</a></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>markdown支持有序以及无序列表。</p><h2 id="列表标记"><a href="#列表标记" class="headerlink" title="列表标记"></a>列表标记</h2><p>无序列表使用星号，加号或减号作为列表标记：<br><code>* 第一项</code><br><code>+ 第二项</code><br><code>- 第三项</code><br>效果图如下：  </p><ul><li>第一项  </li></ul><ul><li>第二项  </li></ul><ul><li>第三项     </li></ul><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套只需在子列表中的选项添加四个空格即可：<br>如：<code>[space][space][space][space]-嵌套</code><br>效果图为: </p><ol><li>第一项：    <ul><li>第一项嵌套的第一个元素  </li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素  <h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1>markdown区块引用是在段落开头使用&gt;符号，然后后面紧跟着一个空格符号。当想要结束区块引用时只需输入两个换行符即可结束区块引用。<br>即：<br><code>&gt; 区块引用</code><br>效果图如下：<blockquote><p>区块引用  </p></blockquote></li></ul></li></ol><p>此外区块还可以进行嵌套，一个&gt;符号是最外层，两个&gt;是第一层嵌套，以此类推：  </p><blockquote><p>最外层  </p><blockquote><p>第二层  </p><blockquote><p>第三层  </p></blockquote></blockquote></blockquote><p>区块中使用列表实例如下：<br><code>&gt;区块中使用列表</code><br><code>&gt;1. 第一项</code><br><code>&gt;2. 第二项</code><br><code>&gt;+ 第一项</code><br><code>&gt;+ 第二项</code><br>效果为：  </p><blockquote><p>区块中使用列表</p><ol><li>第一项  </li></ol><ul><li>第一项  </li><li>第二项</li></ul><ol><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>列表中使用区块则需要在&gt;前添加四个空格的缩进。<br>实例如下：<br><code>*第一项</code><br>    <code>&gt;tbbt</code><br>    <code>&gt;lol</code><br><code>*第二项</code><br>    <code>&gt;pop3</code><br>    <code>&gt;bob2</code><br>效果图如下：  </p><ul><li>第一项  <blockquote><p>tbbt<br>lol</p></blockquote></li><li>第二项    <blockquote><p>pop3<br>bob2    </p></blockquote></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>如果是段落上的一个函数或代码的一个小片段可以用(`)将其包起来。       </p><blockquote><p>如<u><code>printf</code></u>函数  </p></blockquote><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块用<strong><em>四个空格</em></strong>或一个<strong>Tab键</strong>  </p><ul><li>若要使代码高亮则在需要高亮的代码块的前一行及后一行使用三个反引（或~ 键）,<u>注意在代码区块的末尾的三个[<code>*</code>,<code>*</code>,<code>*</code>]后要紧跟着回车</u> </li><li>同时第一行反引号后面，输入代码块所使用的语言，实现代码高亮。  <h3 id="代码一："><a href="#代码一：" class="headerlink" title="代码一："></a>代码一：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">666</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"it's gonna to be successful!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="代码二："><a href="#代码二：" class="headerlink" title="代码二："></a>代码二：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">666</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"it's gonna to be very very successful!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1>链接使用方法如下：  <blockquote><p>[链接名称]（链接地址）<br>或者<br>&lt;链接地址&gt;<br>例如：<br>[Google] (www.google.com)  </p><www.baidu.com>  </www.baidu.com></blockquote></li></ul><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>markdown 图片语法格式如下：  </p><blockquote><p><a href="图片地址" data-fancybox="group" data-caption="alt 属性文本" class="fancybox"><img alt="alt 属性文本" title="alt 属性文本" data-src="图片地址" class="lazyload"></a><br>![alt<br><a href="图片地址" data-fancybox="group" data-caption="alt 属性文本" class="fancybox"><img alt="alt 属性文本" title="alt 属性文本" data-src="图片地址" class="lazyload"></a>  </p><ul><li>开头一个感叹号！  </li><li>接着一个方括号，里面放上图片的替代文字    </li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。<br>使用实例：<br><a href="http://static.runoob.com/images/runoob-logo.png" data-fancybox="group" data-caption="RUNOOB 图标" class="fancybox"><img alt="RUNOOB 图标" title="RUNOOB 图标" data-src="http://static.runoob.com/images/runoob-logo.png" class="lazyload"></a><br><a href="http://q4wxf2l6s.bkt.clouddn.com/%E6%8D%95%E8%8E%B7.PNG" data-fancybox="group" data-caption="程序 图标" class="fancybox"><img alt="程序 图标" title="程序 图标" data-src="http://q4wxf2l6s.bkt.clouddn.com/%E6%8D%95%E8%8E%B7.PNG" class="lazyload"></a><br><a href="http://static.runoob.com/images/runoob-logo.png" data-fancybox="group" data-caption="RUNOOB 图标" class="fancybox"><img alt="RUNOOB 图标" title="RUNOOB 图标" data-src="http://static.runoob.com/images/runoob-logo.png" class="lazyload"></a></li></ul></blockquote><h1 id="结尾语"><a href="#结尾语" class="headerlink" title="结尾语"></a>结尾语</h1><p>对于hexo+git的组合来说，文章通过markdown书写，然后通过hexo g生成静态文件，再部署到服务器上，完成对文章的发布，所以说，markdown在当今html，css大行其道的时候仍能保留有其一席之地。  </p><script type="math/tex; mode=display">\begin{matrix} \lim_{n \to \infty}x_n \end{matrix}</script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown文档格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/10/hello-world/"/>
      <url>/2020/01/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
